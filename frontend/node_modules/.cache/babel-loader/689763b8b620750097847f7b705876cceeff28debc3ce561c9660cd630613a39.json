{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wuzek\\\\OneDrive\\\\Desktop\\\\fact_check_website\\\\frontend\\\\src\\\\components\\\\Survey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Survey() {\n  _s();\n  // State declarations\n  const [questions, setQuestions] = useState([]); // Array of survey elements from backend\n  const [currentElementIndex, setCurrentElementIndex] = useState(0); // Index of the current element\n  const [currentStep, setCurrentStep] = useState(0); // Step within the current element (0-3)\n  const [answers, setAnswers] = useState([]); // Array to store user answers\n\n  // Function to get the question text and options based on step and element\n  const getQuestion = (step, element) => {\n    const {\n      type,\n      claim\n    } = element;\n    if (step === 0) {\n      return {\n        text: type === 1 ? `Do you think this claim is True or False?` : `Do you support or against this claim?`,\n        options: type === 1 ? [\"True\", \"False\"] : [\"Support\", \"Against\"]\n      };\n    } else if (step === 1) {\n      return {\n        text: \"How certain are you about your choice? (1 = Not at all certain, 5 = Extremely certain)\",\n        options: [1, 2, 3, 4, 5]\n      };\n    } else if (step === 2) {\n      return {\n        text: type === 1 ? \"After checking the AI response to the relevant question, do you think this claim is True or False?\" : \"After checking the AI comment to the claim, do you support or against this claim?\",\n        options: type === 1 ? [\"True\", \"False\"] : [\"Support\", \"Against\"]\n      };\n    } else if (step === 3) {\n      return {\n        text: type === 1 ? \"After checking the AI response to the relevant question, how certain are you about your choice? (1 = Not at all certain, 5 = Extremely certain)\" : \"After checking the AI comment to the claim, how certain are you about your choice? (1 = Not at all certain, 5 = Extremely certain)\",\n        options: [1, 2, 3, 4, 5]\n      };\n    }\n  };\n\n  // Fetch questions and initialize answers on component mount\n  useEffect(() => {\n    fetch('http://localhost:3001/questions/1').then(response => response.json()).then(data => {\n      setQuestions(data);\n      setAnswers(data.map(() => [null, null, null, null])); // Initialize answers array\n    }).catch(error => console.error('Error fetching questions:', error));\n  }, []);\n\n  // Loading state\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Current element and question\n  const currentElement = questions[currentElementIndex];\n  const currentQuestion = getQuestion(currentStep, currentElement);\n\n  // Handle answer selection and navigation\n  const handleAnswer = selectedOption => {\n    const newAnswers = [...answers];\n    newAnswers[currentElementIndex][currentStep] = selectedOption;\n    setAnswers(newAnswers);\n    if (currentStep < 3) {\n      setCurrentStep(currentStep + 1); // Move to next step within element\n    } else if (currentElementIndex < questions.length - 1) {\n      setCurrentElementIndex(currentElementIndex + 1); // Move to next element\n      setCurrentStep(0); // Reset step to 0\n    } else {\n      alert('Survey completed!'); // Survey finished\n    }\n  };\n\n  // Render the survey UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Claim \", currentElement.claim_number, \": \", currentElement.claim]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), currentStep === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentElement.type === 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Relevant Question:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 18\n          }, this), \" \", currentElement.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"AI Response:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 18\n          }, this), \" \", currentElement.answer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"AI Comment:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 16\n        }, this), \" \", currentElement.comment]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentQuestion.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswer(option),\n        children: option\n      }, option, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Survey, \"4/oQTP3f/Gk+n4stsuLMBggehPA=\");\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Survey","_s","questions","setQuestions","currentElementIndex","setCurrentElementIndex","currentStep","setCurrentStep","answers","setAnswers","getQuestion","step","element","type","claim","text","options","fetch","then","response","json","data","map","catch","error","console","length","children","fileName","_jsxFileName","lineNumber","columnNumber","currentElement","currentQuestion","handleAnswer","selectedOption","newAnswers","alert","claim_number","question","answer","comment","option","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wuzek/OneDrive/Desktop/fact_check_website/frontend/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Survey() {\r\n  // State declarations\r\n  const [questions, setQuestions] = useState([]); // Array of survey elements from backend\r\n  const [currentElementIndex, setCurrentElementIndex] = useState(0); // Index of the current element\r\n  const [currentStep, setCurrentStep] = useState(0); // Step within the current element (0-3)\r\n  const [answers, setAnswers] = useState([]); // Array to store user answers\r\n\r\n  // Function to get the question text and options based on step and element\r\n  const getQuestion = (step, element) => {\r\n    const { type, claim } = element;\r\n    if (step === 0) {\r\n      return {\r\n        text: type === 1 ? `Do you think this claim is True or False?` : `Do you support or against this claim?`,\r\n        options: type === 1 ? [\"True\", \"False\"] : [\"Support\", \"Against\"]\r\n      };\r\n    } else if (step === 1) {\r\n      return {\r\n        text: \"How certain are you about your choice? (1 = Not at all certain, 5 = Extremely certain)\",\r\n        options: [1, 2, 3, 4, 5]\r\n      };\r\n    } else if (step === 2) {\r\n      return {\r\n        text: type === 1 ? \"After checking the AI response to the relevant question, do you think this claim is True or False?\" : \"After checking the AI comment to the claim, do you support or against this claim?\",\r\n        options: type === 1 ? [\"True\", \"False\"] : [\"Support\", \"Against\"]\r\n      };\r\n    } else if (step === 3) {\r\n      return {\r\n        text: type === 1 ? \"After checking the AI response to the relevant question, how certain are you about your choice? (1 = Not at all certain, 5 = Extremely certain)\" : \"After checking the AI comment to the claim, how certain are you about your choice? (1 = Not at all certain, 5 = Extremely certain)\",\r\n        options: [1, 2, 3, 4, 5]\r\n      };\r\n    }\r\n  };\r\n\r\n  // Fetch questions and initialize answers on component mount\r\n  useEffect(() => {\r\n    fetch('http://localhost:3001/questions/1')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setQuestions(data);\r\n        setAnswers(data.map(() => [null, null, null, null])); // Initialize answers array\r\n      })\r\n      .catch(error => console.error('Error fetching questions:', error));\r\n  }, []);\r\n\r\n  // Loading state\r\n  if (questions.length === 0) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Current element and question\r\n  const currentElement = questions[currentElementIndex];\r\n  const currentQuestion = getQuestion(currentStep, currentElement);\r\n\r\n  // Handle answer selection and navigation\r\n  const handleAnswer = (selectedOption) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[currentElementIndex][currentStep] = selectedOption;\r\n    setAnswers(newAnswers);\r\n\r\n    if (currentStep < 3) {\r\n      setCurrentStep(currentStep + 1); // Move to next step within element\r\n    } else if (currentElementIndex < questions.length - 1) {\r\n      setCurrentElementIndex(currentElementIndex + 1); // Move to next element\r\n      setCurrentStep(0); // Reset step to 0\r\n    } else {\r\n      alert('Survey completed!'); // Survey finished\r\n    }\r\n  };\r\n\r\n  // Render the survey UI\r\n  return (\r\n    <div>\r\n      <h2>Claim {currentElement.claim_number}: {currentElement.claim}</h2>\r\n      {currentStep === 2 && (\r\n        <div>\r\n          {currentElement.type === 1 ? (\r\n            <>\r\n              <p><strong>Relevant Question:</strong> {currentElement.question}</p>\r\n              <p><strong>AI Response:</strong> {currentElement.answer}</p>\r\n            </>\r\n          ) : (\r\n            <p><strong>AI Comment:</strong> {currentElement.comment}</p>\r\n          )}\r\n        </div>\r\n      )}\r\n      <p>{currentQuestion.text}</p>\r\n      <div>\r\n        {currentQuestion.options.map(option => (\r\n          <button key={option} onClick={() => handleAnswer(option)}>\r\n            {option}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}