{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wuzek\\\\OneDrive\\\\Desktop\\\\belief_change_survey\\\\frontend\\\\src\\\\components\\\\Survey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Survey.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Survey({\n  participantNumber,\n  onComplete\n}) {\n  _s();\n  const [currentElementIndex, setCurrentElementIndex] = useState(0);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [questionData, setQuestionData] = useState(null);\n  const [questions, setQuestions] = useState(null);\n\n  // Fetch questions from backend when component mounts\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001'}/questions/${participantNumber}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch questions');\n        }\n        const data = await response.json();\n        setQuestions(data);\n        setAnswers(Array(data.length).fill([]));\n      } catch (error) {\n        console.error('Error fetching questions:', error);\n      }\n    };\n    if (participantNumber) {\n      fetchQuestions();\n    }\n  }, [participantNumber]);\n\n  // Update question data when step or index changes\n  useEffect(() => {\n    if (questions && questions[currentElementIndex]) {\n      const {\n        type\n      } = questions[currentElementIndex];\n      let newQuestionData = null;\n      if (currentStep === 0) {\n        newQuestionData = {\n          text: type === 1 ? \"Do you think this claim is True or False?\" : \"Do you agree or disagree with this claim?\",\n          options: type === 1 ? [\"True\", \"False\"] : [\"Agree\", \"Disagree\"]\n        };\n      } else if (currentStep === 1) {\n        newQuestionData = {\n          text: \"How certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\n          options: [\"1\", \"2\", \"3\", \"4\", \"5\"]\n        };\n      }\n      setQuestionData(newQuestionData);\n    }\n  }, [currentStep, currentElementIndex, questions]);\n\n  // Handle option selection\n  const handleOptionSelect = option => {\n    setSelectedOption(option);\n  };\n\n  // Handle next button click\n  const handleNext = async () => {\n    if (selectedOption === null) {\n      alert('Please select an option before proceeding');\n      return;\n    }\n    const newAnswers = [...answers];\n    if (!newAnswers[currentElementIndex]) {\n      newAnswers[currentElementIndex] = [];\n    }\n    newAnswers[currentElementIndex][currentStep] = selectedOption;\n    setAnswers(newAnswers);\n    if (currentStep < 1) {\n      setCurrentStep(currentStep + 1);\n    } else if (currentElementIndex < questions.length - 1) {\n      setCurrentElementIndex(currentElementIndex + 1);\n      setCurrentStep(0);\n    } else {\n      // Submit all answers to backend\n      try {\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001'}/responses`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            participantNumber,\n            answers: newAnswers\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to save responses');\n        }\n        onComplete && onComplete(newAnswers);\n      } catch (error) {\n        console.error('Error saving responses:', error);\n        alert('There was an error saving your responses. Please try again.');\n      }\n    }\n    setSelectedOption(null);\n  };\n\n  // Render loading state if question data is not ready\n  if (!questions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading questions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: questions[currentElementIndex].text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), questionData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: questionData.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-section\",\n        children: questionData.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleOptionSelect(option),\n          className: selectedOption === option ? 'selected' : '',\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next-button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(Survey, \"Hymu3mFBH71T9QdnFulUdrEm0hU=\");\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Survey","participantNumber","onComplete","_s","currentElementIndex","setCurrentElementIndex","currentStep","setCurrentStep","answers","setAnswers","selectedOption","setSelectedOption","questionData","setQuestionData","questions","setQuestions","fetchQuestions","response","fetch","process","env","REACT_APP_BACKEND_URL","ok","Error","data","json","Array","length","fill","error","console","type","newQuestionData","text","options","handleOptionSelect","option","handleNext","alert","newAnswers","method","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/wuzek/OneDrive/Desktop/belief_change_survey/frontend/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Survey.css';\r\n\r\nfunction Survey({ participantNumber, onComplete }) {\r\n  const [currentElementIndex, setCurrentElementIndex] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [selectedOption, setSelectedOption] = useState(null);\r\n  const [questionData, setQuestionData] = useState(null);\r\n  const [questions, setQuestions] = useState(null);\r\n\r\n  // Fetch questions from backend when component mounts\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      try {\r\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001'}/questions/${participantNumber}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch questions');\r\n        }\r\n        const data = await response.json();\r\n        setQuestions(data);\r\n        setAnswers(Array(data.length).fill([]));\r\n      } catch (error) {\r\n        console.error('Error fetching questions:', error);\r\n      }\r\n    };\r\n\r\n    if (participantNumber) {\r\n      fetchQuestions();\r\n    }\r\n  }, [participantNumber]);\r\n\r\n  // Update question data when step or index changes\r\n  useEffect(() => {\r\n    if (questions && questions[currentElementIndex]) {\r\n      const { type } = questions[currentElementIndex];\r\n      \r\n      let newQuestionData = null;\r\n      \r\n      if (currentStep === 0) {\r\n        newQuestionData = {\r\n          text: type === 1 ? \"Do you think this claim is True or False?\" : \"Do you agree or disagree with this claim?\",\r\n          options: type === 1 ? [\"True\", \"False\"] : [\"Agree\", \"Disagree\"]\r\n        };\r\n      } else if (currentStep === 1) {\r\n        newQuestionData = {\r\n          text: \"How certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\r\n          options: [\"1\", \"2\", \"3\", \"4\", \"5\"]\r\n        };\r\n      }\r\n      \r\n      setQuestionData(newQuestionData);\r\n    }\r\n  }, [currentStep, currentElementIndex, questions]);\r\n\r\n  // Handle option selection\r\n  const handleOptionSelect = (option) => {\r\n    setSelectedOption(option);\r\n  };\r\n\r\n  // Handle next button click\r\n  const handleNext = async () => {\r\n    if (selectedOption === null) {\r\n      alert('Please select an option before proceeding');\r\n      return;\r\n    }\r\n\r\n    const newAnswers = [...answers];\r\n    if (!newAnswers[currentElementIndex]) {\r\n      newAnswers[currentElementIndex] = [];\r\n    }\r\n    newAnswers[currentElementIndex][currentStep] = selectedOption;\r\n    setAnswers(newAnswers);\r\n\r\n    if (currentStep < 1) {\r\n      setCurrentStep(currentStep + 1);\r\n    } else if (currentElementIndex < questions.length - 1) {\r\n      setCurrentElementIndex(currentElementIndex + 1);\r\n      setCurrentStep(0);\r\n    } else {\r\n      // Submit all answers to backend\r\n      try {\r\n        const response = await fetch(`${process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001'}/responses`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            participantNumber,\r\n            answers: newAnswers\r\n          }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to save responses');\r\n        }\r\n\r\n        onComplete && onComplete(newAnswers);\r\n      } catch (error) {\r\n        console.error('Error saving responses:', error);\r\n        alert('There was an error saving your responses. Please try again.');\r\n      }\r\n    }\r\n\r\n    setSelectedOption(null);\r\n  };\r\n\r\n  // Render loading state if question data is not ready\r\n  if (!questions) {\r\n    return <div>Loading questions...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"survey-container\">\r\n      <h2>{questions[currentElementIndex].text}</h2>\r\n      \r\n      {questionData && (\r\n        <>\r\n          <div className=\"question-section\">\r\n            <p>{questionData.text}</p>\r\n          </div>\r\n          <div className=\"options-section\">\r\n            {questionData.options.map((option) => (\r\n              <button\r\n                key={option}\r\n                onClick={() => handleOptionSelect(option)}\r\n                className={selectedOption === option ? 'selected' : ''}\r\n              >\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <div className=\"next-button-container\">\r\n            <button \r\n              className=\"next-button\"\r\n              onClick={handleNext}\r\n            >\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}