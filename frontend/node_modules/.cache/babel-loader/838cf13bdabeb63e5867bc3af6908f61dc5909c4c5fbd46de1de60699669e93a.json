{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wuzek\\\\OneDrive\\\\Desktop\\\\belief_change_survey\\\\frontend\\\\src\\\\components\\\\Survey.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Survey.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Survey({\n  participantNumber,\n  age,\n  education\n}) {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentElementIndex, setCurrentElementIndex] = useState(0);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [error, setError] = useState(null);\n  const [isAITyping, setIsAITyping] = useState(false);\n  const [typedText, setTypedText] = useState('');\n  const [isAIRequested, setIsAIRequested] = useState(false); // Tracks if AI suggestion is requested\n  const [supportCounter, setSupportCounter] = useState(0);\n  const [againstCounter, setAgainstCounter] = useState(0);\n  const [commentToShow, setCommentToShow] = useState([]);\n\n  // Fetch questions based on participantNumber\n  useEffect(() => {\n    console.log(\"Backend URL:\", process.env.REACT_APP_BACKEND_URL);\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/questions/${participantNumber}`).then(response => {\n      if (!response.ok) throw new Error('Invalid participant number');\n      return response.json();\n    }).then(data => {\n      setQuestions(data);\n      setAnswers(data.map(() => [null, null, null, null]));\n      setError(null);\n    }).catch(error => setError(error.message));\n  }, [participantNumber]);\n\n  // Reset AI-related state when currentStep changes\n  useEffect(() => {\n    if (currentStep !== 2) {\n      setIsAIRequested(false);\n      setTypedText('');\n      setIsAITyping(false);\n    }\n  }, [currentStep]);\n\n  // Handle the typing effect when AI is requested\n  useEffect(() => {\n    if (currentStep === 2 && isAIRequested && questions.length > 0) {\n      const currentElement = questions[currentElementIndex];\n      let aiText;\n\n      // Handle type 1 and type 2 differently\n      if (currentElement.type === 1) {\n        aiText = currentElement.answer; // Use the single answer for type 1\n      } else if (currentElement.type === 2) {\n        const commentIndex = commentToShow[currentElementIndex];\n        aiText = commentIndex === 1 ? currentElement.comment1 : currentElement.comment2;\n      }\n\n      // Validate the text\n      if (typeof aiText !== 'string' || aiText.length === 0) {\n        console.error('No valid AI text to display:', aiText);\n        setTypedText('');\n        setIsAITyping(false);\n        return;\n      }\n\n      // Start typing effect\n      setTypedText('');\n      setIsAITyping(true);\n      let index = 0;\n      const typingInterval = setInterval(() => {\n        if (index < aiText.length) {\n          setTypedText(aiText.slice(0, index + 1));\n          index++;\n        } else {\n          clearInterval(typingInterval);\n          setIsAITyping(false);\n        }\n      }, 50);\n      return () => clearInterval(typingInterval);\n    }\n  }, [isAIRequested, currentStep, questions, currentElementIndex, commentToShow]);\n  useEffect(() => {\n    if (questions.length > 0) {\n      setCommentToShow(Array(questions.length).fill(0));\n    }\n  }, [questions]);\n\n  // useEffect(() => {\n  //   if (currentStep === 2 && questions.length > 0) {\n  //     const currentElement = questions[currentElementIndex];\n  //     const aiText = currentElement.type === 1 ? currentElement.answer : currentElement.comment;\n\n  //     // Validate aiText\n  //     if (typeof aiText !== 'string' || aiText.length === 0) {\n  //       console.error('aiText is not a valid string:', aiText);\n  //       setTypedText(''); // Reset to empty if invalid\n  //       setIsAITyping(false);\n  //       return;\n  //     }\n\n  //     console.log('aiText:', aiText); // Debug the input\n\n  //     setTypedText(''); // Reset typed text\n  //     setIsAITyping(true);\n\n  //     let index = 0;\n  //     const typingInterval = setInterval(() => {\n  //       if (index < aiText.length) {\n  //         // Set the full substring up to the current index\n  //         setTypedText(aiText.slice(0, index + 1));\n  //         index++;\n  //       } else {\n  //         clearInterval(typingInterval);\n  //         setIsAITyping(false);\n  //       }\n  //     }, 50);\n\n  //     // Cleanup to prevent overlapping intervals\n  //     return () => clearInterval(typingInterval);\n  //   }\n  // }, [currentStep, questions, currentElementIndex]);\n\n  // Define the current question based on step and element type\n  const getQuestion = (step, element) => {\n    const {\n      type\n    } = element;\n    if (step === 0) {\n      return {\n        text: type === 1 ? \"Do you think this claim is True or False?\" : \"Do you agree or disagree with this claim?\",\n        options: type === 1 ? [\"True\", \"False\"] : [\"Agree\", \"Disagree\"]\n      };\n    } else if (step === 1) {\n      return {\n        text: \"How certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\n        options: [\"1: Not at all certain\", \"2: Slightly certain\", \"3: Moderately certain\", \"4: Very certain\", \"5: Absolutely certain\"]\n      };\n    } else if (step === 2) {\n      return {\n        text: type === 1 ? \"After checking the AI response, do you think this claim is True or False?\" : \"After checking the AI comment, do you agree or disagree with this claim?\",\n        options: type === 1 ? [\"True\", \"False\"] : [\"Agree\", \"Disagree\"]\n      };\n    } else if (step === 3) {\n      return {\n        text: type === 1 ? \"After checking the AI response, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\" : \"After checking the AI comment, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\n        options: [\"1: Not at all certain\", \"2: Slightly certain\", \"3: Moderately certain\", \"4: Very certain\", \"5: Absolutely certain\"]\n      };\n    }\n  };\n\n  // Early returns for error and loading states\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 21\n  }, this);\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 38\n  }, this);\n  const currentElement = questions[currentElementIndex];\n  const currentQuestion = getQuestion(currentStep, currentElement);\n\n  // Handle user answers and survey progression\n  const handleAnswer = selectedOption => {\n    const newAnswers = [...answers];\n    newAnswers[currentElementIndex][currentStep] = selectedOption;\n    setAnswers(newAnswers);\n\n    // Get the current question\n    const currentElement = questions[currentElementIndex];\n\n    // For type 2 questions in step 0, decide which comment to show\n    if (currentStep === 0 && currentElement.type === 2) {\n      if (selectedOption === \"Support\") {\n        const commentIndex = supportCounter % 2 === 0 ? 1 : 2; // Alternate: 1, 2, 1, 2...\n        setCommentToShow(prev => {\n          const newCommentToShow = [...prev];\n          newCommentToShow[currentElementIndex] = commentIndex;\n          return newCommentToShow;\n        });\n        setSupportCounter(prev => prev + 1);\n      } else if (selectedOption === \"Against\") {\n        const commentIndex = againstCounter % 2 === 0 ? 1 : 2; // Alternate: 1, 2, 1, 2...\n        setCommentToShow(prev => {\n          const newCommentToShow = [...prev];\n          newCommentToShow[currentElementIndex] = commentIndex;\n          return newCommentToShow;\n        });\n        setAgainstCounter(prev => prev + 1);\n      }\n    }\n    if (currentStep < 3) {\n      setCurrentStep(currentStep + 1);\n    } else if (currentElementIndex < questions.length - 1) {\n      setCurrentElementIndex(currentElementIndex + 1);\n      setCurrentStep(0);\n    } else {\n      fetch(`${process.env.REACT_APP_BACKEND_URL}/responses`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          participantNumber,\n          age,\n          education,\n          answers: newAnswers\n        })\n      }).then(response => response.text()).then(data => {\n        console.log('Success:', data);\n        alert('Survey submitted successfully!');\n      }).catch(error => {\n        console.error('Error:', error);\n        alert('Failed to submit survey.');\n      });\n    }\n  };\n\n  // Handle AI suggestion request\n  const handleAIRequest = () => {\n    setIsAIRequested(true); // Trigger the typing effect\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"survey-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"claim-section\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Claim \", currentElement.claim_number, \": \", currentElement.claim]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), currentStep === 2 && currentElement.type === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Relevant Question:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 14\n        }, this), \" \", currentElement.question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this), currentStep === 2 && !isAIRequested && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAIRequest,\n      children: \"Ask AI for suggestion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this), currentStep === 2 && isAIRequested && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: currentElement.type === 1 ? \"AI Response:\" : `AI Comment:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: typedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }, this), (currentStep !== 2 || currentStep === 2 && isAIRequested && !isAITyping) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentQuestion.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-section\",\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswer(option),\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s(Survey, \"vzbHfaY9B3r3QeLAzkFFwtx0n88=\");\n_c = Survey;\nexport default Survey;\nvar _c;\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Survey","participantNumber","age","education","_s","questions","setQuestions","currentElementIndex","setCurrentElementIndex","currentStep","setCurrentStep","answers","setAnswers","error","setError","isAITyping","setIsAITyping","typedText","setTypedText","isAIRequested","setIsAIRequested","supportCounter","setSupportCounter","againstCounter","setAgainstCounter","commentToShow","setCommentToShow","console","log","process","env","REACT_APP_BACKEND_URL","fetch","then","response","ok","Error","json","data","map","catch","message","length","currentElement","aiText","type","answer","commentIndex","comment1","comment2","index","typingInterval","setInterval","slice","clearInterval","Array","fill","getQuestion","step","element","text","options","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","handleAnswer","selectedOption","newAnswers","prev","newCommentToShow","method","headers","body","JSON","stringify","alert","handleAIRequest","className","claim_number","claim","question","onClick","option","_c","$RefreshReg$"],"sources":["C:/Users/wuzek/OneDrive/Desktop/belief_change_survey/frontend/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Survey.css';\r\n\r\nfunction Survey({ participantNumber, age, education }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentElementIndex, setCurrentElementIndex] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isAITyping, setIsAITyping] = useState(false);\r\n  const [typedText, setTypedText] = useState('');\r\n  const [isAIRequested, setIsAIRequested] = useState(false); // Tracks if AI suggestion is requested\r\n  const [supportCounter, setSupportCounter] = useState(0);\r\n  const [againstCounter, setAgainstCounter] = useState(0);\r\n  const [commentToShow, setCommentToShow] = useState([]);\r\n\r\n  // Fetch questions based on participantNumber\r\n  useEffect(() => {\r\n    console.log(\"Backend URL:\", process.env.REACT_APP_BACKEND_URL);\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/questions/${participantNumber}`)\r\n      .then(response => {\r\n        if (!response.ok) throw new Error('Invalid participant number');\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setQuestions(data);\r\n        setAnswers(data.map(() => [null, null, null, null]));\r\n        setError(null);\r\n      })\r\n      .catch(error => setError(error.message));\r\n  }, [participantNumber]);\r\n\r\n  // Reset AI-related state when currentStep changes\r\n  useEffect(() => {\r\n    if (currentStep !== 2) {\r\n      setIsAIRequested(false);\r\n      setTypedText('');\r\n      setIsAITyping(false);\r\n    }\r\n  }, [currentStep]);\r\n\r\n  // Handle the typing effect when AI is requested\r\n  useEffect(() => {\r\n    if (currentStep === 2 && isAIRequested && questions.length > 0) {\r\n      const currentElement = questions[currentElementIndex];\r\n      let aiText;\r\n  \r\n      // Handle type 1 and type 2 differently\r\n      if (currentElement.type === 1) {\r\n        aiText = currentElement.answer; // Use the single answer for type 1\r\n      } else if (currentElement.type === 2) {\r\n        const commentIndex = commentToShow[currentElementIndex];\r\n        aiText = commentIndex === 1 ? currentElement.comment1 : currentElement.comment2;\r\n      }\r\n  \r\n      // Validate the text\r\n      if (typeof aiText !== 'string' || aiText.length === 0) {\r\n        console.error('No valid AI text to display:', aiText);\r\n        setTypedText('');\r\n        setIsAITyping(false);\r\n        return;\r\n      }\r\n  \r\n      // Start typing effect\r\n      setTypedText('');\r\n      setIsAITyping(true);\r\n      let index = 0;\r\n      const typingInterval = setInterval(() => {\r\n        if (index < aiText.length) {\r\n          setTypedText(aiText.slice(0, index + 1));\r\n          index++;\r\n        } else {\r\n          clearInterval(typingInterval);\r\n          setIsAITyping(false);\r\n        }\r\n      }, 50);\r\n  \r\n      return () => clearInterval(typingInterval);\r\n    }\r\n  }, [isAIRequested, currentStep, questions, currentElementIndex, commentToShow]);\r\n  \r\n  useEffect(() => {\r\n    if (questions.length > 0) {\r\n      setCommentToShow(Array(questions.length).fill(0));\r\n    }\r\n  }, [questions]);\r\n\r\n  // useEffect(() => {\r\n  //   if (currentStep === 2 && questions.length > 0) {\r\n  //     const currentElement = questions[currentElementIndex];\r\n  //     const aiText = currentElement.type === 1 ? currentElement.answer : currentElement.comment;\r\n  \r\n  //     // Validate aiText\r\n  //     if (typeof aiText !== 'string' || aiText.length === 0) {\r\n  //       console.error('aiText is not a valid string:', aiText);\r\n  //       setTypedText(''); // Reset to empty if invalid\r\n  //       setIsAITyping(false);\r\n  //       return;\r\n  //     }\r\n  \r\n  //     console.log('aiText:', aiText); // Debug the input\r\n  \r\n  //     setTypedText(''); // Reset typed text\r\n  //     setIsAITyping(true);\r\n  \r\n  //     let index = 0;\r\n  //     const typingInterval = setInterval(() => {\r\n  //       if (index < aiText.length) {\r\n  //         // Set the full substring up to the current index\r\n  //         setTypedText(aiText.slice(0, index + 1));\r\n  //         index++;\r\n  //       } else {\r\n  //         clearInterval(typingInterval);\r\n  //         setIsAITyping(false);\r\n  //       }\r\n  //     }, 50);\r\n  \r\n  //     // Cleanup to prevent overlapping intervals\r\n  //     return () => clearInterval(typingInterval);\r\n  //   }\r\n  // }, [currentStep, questions, currentElementIndex]);\r\n\r\n  // Define the current question based on step and element type\r\n  const getQuestion = (step, element) => {\r\n    const { type } = element;\r\n    if (step === 0) {\r\n      return {\r\n        text: type === 1 ? \"Do you think this claim is True or False?\" : \"Do you agree or disagree with this claim?\",\r\n        options: type === 1 ? [\"True\", \"False\"] : [\"Agree\", \"Disagree\"]\r\n      };\r\n    } else if (step === 1) {\r\n      return {\r\n        text: \"How certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\r\n        options: [\"1: Not at all certain\", \"2: Slightly certain\", \"3: Moderately certain\", \"4: Very certain\", \"5: Absolutely certain\"]\r\n      };\r\n    } else if (step === 2) {\r\n      return {\r\n        text: type === 1 \r\n          ? \"After checking the AI response, do you think this claim is True or False?\" \r\n          : \"After checking the AI comment, do you agree or disagree with this claim?\",\r\n        options: type === 1 ? [\"True\", \"False\"] : [\"Agree\", \"Disagree\"]\r\n      };\r\n    } else if (step === 3) {\r\n      return {\r\n        text: type === 1 \r\n          ? \"After checking the AI response, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\" \r\n          : \"After checking the AI comment, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\r\n        options: [\"1: Not at all certain\", \"2: Slightly certain\", \"3: Moderately certain\", \"4: Very certain\", \"5: Absolutely certain\"]\r\n      };\r\n    }\r\n  };\r\n\r\n  // Early returns for error and loading states\r\n  if (error) return <div>{error}</div>;\r\n  if (questions.length === 0) return <div>Loading...</div>;\r\n\r\n  const currentElement = questions[currentElementIndex];\r\n  const currentQuestion = getQuestion(currentStep, currentElement);\r\n\r\n  // Handle user answers and survey progression\r\n  const handleAnswer = (selectedOption) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[currentElementIndex][currentStep] = selectedOption;\r\n    setAnswers(newAnswers);\r\n  \r\n    // Get the current question\r\n    const currentElement = questions[currentElementIndex];\r\n  \r\n    // For type 2 questions in step 0, decide which comment to show\r\n    if (currentStep === 0 && currentElement.type === 2) {\r\n      if (selectedOption === \"Support\") {\r\n        const commentIndex = supportCounter % 2 === 0 ? 1 : 2; // Alternate: 1, 2, 1, 2...\r\n        setCommentToShow((prev) => {\r\n          const newCommentToShow = [...prev];\r\n          newCommentToShow[currentElementIndex] = commentIndex;\r\n          return newCommentToShow;\r\n        });\r\n        setSupportCounter((prev) => prev + 1);\r\n      } else if (selectedOption === \"Against\") {\r\n        const commentIndex = againstCounter % 2 === 0 ? 1 : 2; // Alternate: 1, 2, 1, 2...\r\n        setCommentToShow((prev) => {\r\n          const newCommentToShow = [...prev];\r\n          newCommentToShow[currentElementIndex] = commentIndex;\r\n          return newCommentToShow;\r\n        });\r\n        setAgainstCounter((prev) => prev + 1);\r\n      }\r\n    }\r\n  \r\n    if (currentStep < 3) {\r\n      setCurrentStep(currentStep + 1);\r\n    } else if (currentElementIndex < questions.length - 1) {\r\n      setCurrentElementIndex(currentElementIndex + 1);\r\n      setCurrentStep(0);\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_BACKEND_URL}/responses`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ participantNumber, age, education, answers: newAnswers }),\r\n      })\r\n        .then(response => response.text())\r\n        .then(data => {\r\n          console.log('Success:', data);\r\n          alert('Survey submitted successfully!');\r\n        })\r\n        .catch(error => {\r\n          console.error('Error:', error);\r\n          alert('Failed to submit survey.');\r\n        });\r\n    }\r\n  };\r\n\r\n  // Handle AI suggestion request\r\n  const handleAIRequest = () => {\r\n    setIsAIRequested(true); // Trigger the typing effect\r\n  };\r\n\r\n  return (\r\n    <div className=\"survey-container\">\r\n      {/* Always show the claim */}\r\n      <div className=\"claim-section\">\r\n        <h2>Claim {currentElement.claim_number}: {currentElement.claim}</h2>\r\n      </div>\r\n  \r\n      {/* Step 2: Show relevant question for type 1 */}\r\n      {currentStep === 2 && currentElement.type === 1 && (\r\n        <div className=\"question-section\">\r\n          <p><strong>Relevant Question:</strong> {currentElement.question}</p>\r\n        </div>\r\n      )}\r\n  \r\n      {/* Step 2: Show \"Ask AI for suggestion\" button if AI not yet requested */}\r\n      {currentStep === 2 && !isAIRequested && (\r\n        <button onClick={handleAIRequest}>Ask AI for suggestion</button>\r\n      )}\r\n  \r\n      {/* Step 2: Show AI response/comment with typing effect after request */}\r\n      {currentStep === 2 && isAIRequested && (\r\n        <div className=\"ai-section\">\r\n        <p>\r\n          <strong>\r\n            {currentElement.type === 1 ? \"AI Response:\" : `AI Comment:`}\r\n          </strong>\r\n        </p>\r\n          <p>{typedText}</p>\r\n        </div>\r\n      )}\r\n      {/* Show survey question and options for all steps except step 2 until AI typing is done */}\r\n      {(currentStep !== 2 || (currentStep === 2 && isAIRequested && !isAITyping)) && (\r\n        <>\r\n          <div className=\"question-section\">\r\n            <p>{currentQuestion.text}</p>\r\n          </div>\r\n          <div className=\"options-section\">\r\n            {currentQuestion.options.map((option) => (\r\n              <button key={option} onClick={() => handleAnswer(option)}>\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}