{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./Survey.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Survey(_ref){let{participantNumber,age,education}=_ref;const[questions,setQuestions]=useState([]);const[currentElementIndex,setCurrentElementIndex]=useState(0);const[currentStep,setCurrentStep]=useState(0);const[answers,setAnswers]=useState([]);const[error,setError]=useState(null);const[isAITyping,setIsAITyping]=useState(false);const[typedText,setTypedText]=useState('');const[isAIRequested,setIsAIRequested]=useState(false);// Tracks if AI suggestion is requested\nconst[supportCounter,setSupportCounter]=useState(0);const[againstCounter,setAgainstCounter]=useState(0);const[commentToShow,setCommentToShow]=useState([]);// Fetch questions based on participantNumber\nuseEffect(()=>{console.log(\"Backend URL:\",process.env.REACT_APP_BACKEND_URL);fetch(`${process.env.REACT_APP_BACKEND_URL}/questions/${participantNumber}`).then(response=>{if(!response.ok)throw new Error('Invalid participant number');return response.json();}).then(data=>{setQuestions(data);setAnswers(data.map(()=>[null,null,null,null]));setError(null);}).catch(error=>setError(error.message));},[participantNumber]);// Reset AI-related state when currentStep changes\nuseEffect(()=>{if(currentStep!==2){setIsAIRequested(false);setTypedText('');setIsAITyping(false);}},[currentStep]);// Handle the typing effect when AI is requested\nuseEffect(()=>{if(currentStep===2&&isAIRequested&&questions.length>0){const currentElement=questions[currentElementIndex];let aiText;// Handle type 1 and type 2 differently\nif(currentElement.type===1){aiText=currentElement.answer;// Use the single answer for type 1\n}else if(currentElement.type===2){const commentIndex=commentToShow[currentElementIndex];aiText=commentIndex===1?currentElement.comment1:currentElement.comment2;}// Validate the text\nif(typeof aiText!=='string'||aiText.length===0){console.error('No valid AI text to display:',aiText);setTypedText('');setIsAITyping(false);return;}// Start typing effect\nsetTypedText('');setIsAITyping(true);let index=0;const typingInterval=setInterval(()=>{if(index<aiText.length){setTypedText(aiText.slice(0,index+1));index++;}else{clearInterval(typingInterval);setIsAITyping(false);}},50);return()=>clearInterval(typingInterval);}},[isAIRequested,currentStep,questions,currentElementIndex,commentToShow]);useEffect(()=>{if(questions.length>0){setCommentToShow(Array(questions.length).fill(0));}},[questions]);// useEffect(() => {\n//   if (currentStep === 2 && questions.length > 0) {\n//     const currentElement = questions[currentElementIndex];\n//     const aiText = currentElement.type === 1 ? currentElement.answer : currentElement.comment;\n//     // Validate aiText\n//     if (typeof aiText !== 'string' || aiText.length === 0) {\n//       console.error('aiText is not a valid string:', aiText);\n//       setTypedText(''); // Reset to empty if invalid\n//       setIsAITyping(false);\n//       return;\n//     }\n//     console.log('aiText:', aiText); // Debug the input\n//     setTypedText(''); // Reset typed text\n//     setIsAITyping(true);\n//     let index = 0;\n//     const typingInterval = setInterval(() => {\n//       if (index < aiText.length) {\n//         // Set the full substring up to the current index\n//         setTypedText(aiText.slice(0, index + 1));\n//         index++;\n//       } else {\n//         clearInterval(typingInterval);\n//         setIsAITyping(false);\n//       }\n//     }, 50);\n//     // Cleanup to prevent overlapping intervals\n//     return () => clearInterval(typingInterval);\n//   }\n// }, [currentStep, questions, currentElementIndex]);\n// Define the current question based on step and element type\nconst getQuestion=(step,element)=>{const{type}=element;if(step===0){return{text:type===1?\"Do you think this claim is True or False?\":\"Do you support or against this claim?\",options:type===1?[\"True\",\"False\"]:[\"Support\",\"Against\"]};}else if(step===1){return{text:\"How certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",options:[\"1: Not at all certain\",\"2: Slightly certain\",\"3: Moderately certain\",\"4: Very certain\",\"5: Absolutely certain\"]};}else if(step===2){return{text:type===1?\"After checking the AI response, do you think this claim is True or False?\":\"After checking the AI comment, do you support or against this claim?\",options:type===1?[\"True\",\"False\"]:[\"Support\",\"Against\"]};}else if(step===3){return{text:type===1?\"After checking the AI response, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\":\"After checking the AI comment, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",options:[\"1: Not at all certain\",\"2: Slightly certain\",\"3: Moderately certain\",\"4: Very certain\",\"5: Absolutely certain\"]};}};// Early returns for error and loading states\nif(error)return/*#__PURE__*/_jsx(\"div\",{children:error});if(questions.length===0)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});const currentElement=questions[currentElementIndex];const currentQuestion=getQuestion(currentStep,currentElement);// Handle user answers and survey progression\nconst handleAnswer=selectedOption=>{const newAnswers=[...answers];newAnswers[currentElementIndex][currentStep]=selectedOption;setAnswers(newAnswers);// Get the current question\nconst currentElement=questions[currentElementIndex];// For type 2 questions in step 0, decide which comment to show\nif(currentStep===0&&currentElement.type===2){if(selectedOption===\"Support\"){const commentIndex=supportCounter%2===0?1:2;// Alternate: 1, 2, 1, 2...\nsetCommentToShow(prev=>{const newCommentToShow=[...prev];newCommentToShow[currentElementIndex]=commentIndex;return newCommentToShow;});setSupportCounter(prev=>prev+1);}else if(selectedOption===\"Against\"){const commentIndex=againstCounter%2===0?1:2;// Alternate: 1, 2, 1, 2...\nsetCommentToShow(prev=>{const newCommentToShow=[...prev];newCommentToShow[currentElementIndex]=commentIndex;return newCommentToShow;});setAgainstCounter(prev=>prev+1);}}if(currentStep<3){setCurrentStep(currentStep+1);}else if(currentElementIndex<questions.length-1){setCurrentElementIndex(currentElementIndex+1);setCurrentStep(0);}else{fetch(`${process.env.REACT_APP_BACKEND_URL}/responses`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({participantNumber,age,education,answers:newAnswers})}).then(response=>response.text()).then(data=>{console.log('Success:',data);alert('Survey submitted successfully!');}).catch(error=>{console.error('Error:',error);alert('Failed to submit survey.');});}};// Handle AI suggestion request\nconst handleAIRequest=()=>{setIsAIRequested(true);// Trigger the typing effect\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"survey-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"claim-section\",children:/*#__PURE__*/_jsxs(\"h2\",{children:[\"Claim \",currentElement.claim_number,\": \",currentElement.claim]})}),currentStep===2&&currentElement.type===1&&/*#__PURE__*/_jsx(\"div\",{className:\"question-section\",children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Relevant Question:\"}),\" \",currentElement.question]})}),currentStep===2&&!isAIRequested&&/*#__PURE__*/_jsx(\"button\",{onClick:handleAIRequest,children:\"Ask AI for suggestion\"}),currentStep===2&&isAIRequested&&/*#__PURE__*/_jsxs(\"div\",{className:\"ai-section\",children:[/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:currentElement.type===1?\"AI Response:\":`AI Comment:`})}),/*#__PURE__*/_jsx(\"p\",{children:typedText})]}),(currentStep!==2||currentStep===2&&isAIRequested&&!isAITyping)&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"question-section\",children:/*#__PURE__*/_jsx(\"p\",{children:currentQuestion.text})}),/*#__PURE__*/_jsx(\"div\",{className:\"options-section\",children:currentQuestion.options.map(option=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleAnswer(option),children:option},option))})]})]});}export default Survey;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Survey","_ref","participantNumber","age","education","questions","setQuestions","currentElementIndex","setCurrentElementIndex","currentStep","setCurrentStep","answers","setAnswers","error","setError","isAITyping","setIsAITyping","typedText","setTypedText","isAIRequested","setIsAIRequested","supportCounter","setSupportCounter","againstCounter","setAgainstCounter","commentToShow","setCommentToShow","console","log","process","env","REACT_APP_BACKEND_URL","fetch","then","response","ok","Error","json","data","map","catch","message","length","currentElement","aiText","type","answer","commentIndex","comment1","comment2","index","typingInterval","setInterval","slice","clearInterval","Array","fill","getQuestion","step","element","text","options","children","currentQuestion","handleAnswer","selectedOption","newAnswers","prev","newCommentToShow","method","headers","body","JSON","stringify","alert","handleAIRequest","className","claim_number","claim","question","onClick","option"],"sources":["C:/Users/wuzek/OneDrive/Desktop/fact_check_website/frontend/src/components/Survey.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Survey.css';\r\n\r\nfunction Survey({ participantNumber, age, education }) {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentElementIndex, setCurrentElementIndex] = useState(0);\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [isAITyping, setIsAITyping] = useState(false);\r\n  const [typedText, setTypedText] = useState('');\r\n  const [isAIRequested, setIsAIRequested] = useState(false); // Tracks if AI suggestion is requested\r\n  const [supportCounter, setSupportCounter] = useState(0);\r\n  const [againstCounter, setAgainstCounter] = useState(0);\r\n  const [commentToShow, setCommentToShow] = useState([]);\r\n\r\n  // Fetch questions based on participantNumber\r\n  useEffect(() => {\r\n    console.log(\"Backend URL:\", process.env.REACT_APP_BACKEND_URL);\r\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/questions/${participantNumber}`)\r\n      .then(response => {\r\n        if (!response.ok) throw new Error('Invalid participant number');\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setQuestions(data);\r\n        setAnswers(data.map(() => [null, null, null, null]));\r\n        setError(null);\r\n      })\r\n      .catch(error => setError(error.message));\r\n  }, [participantNumber]);\r\n\r\n  // Reset AI-related state when currentStep changes\r\n  useEffect(() => {\r\n    if (currentStep !== 2) {\r\n      setIsAIRequested(false);\r\n      setTypedText('');\r\n      setIsAITyping(false);\r\n    }\r\n  }, [currentStep]);\r\n\r\n  // Handle the typing effect when AI is requested\r\n  useEffect(() => {\r\n    if (currentStep === 2 && isAIRequested && questions.length > 0) {\r\n      const currentElement = questions[currentElementIndex];\r\n      let aiText;\r\n  \r\n      // Handle type 1 and type 2 differently\r\n      if (currentElement.type === 1) {\r\n        aiText = currentElement.answer; // Use the single answer for type 1\r\n      } else if (currentElement.type === 2) {\r\n        const commentIndex = commentToShow[currentElementIndex];\r\n        aiText = commentIndex === 1 ? currentElement.comment1 : currentElement.comment2;\r\n      }\r\n  \r\n      // Validate the text\r\n      if (typeof aiText !== 'string' || aiText.length === 0) {\r\n        console.error('No valid AI text to display:', aiText);\r\n        setTypedText('');\r\n        setIsAITyping(false);\r\n        return;\r\n      }\r\n  \r\n      // Start typing effect\r\n      setTypedText('');\r\n      setIsAITyping(true);\r\n      let index = 0;\r\n      const typingInterval = setInterval(() => {\r\n        if (index < aiText.length) {\r\n          setTypedText(aiText.slice(0, index + 1));\r\n          index++;\r\n        } else {\r\n          clearInterval(typingInterval);\r\n          setIsAITyping(false);\r\n        }\r\n      }, 50);\r\n  \r\n      return () => clearInterval(typingInterval);\r\n    }\r\n  }, [isAIRequested, currentStep, questions, currentElementIndex, commentToShow]);\r\n  \r\n  useEffect(() => {\r\n    if (questions.length > 0) {\r\n      setCommentToShow(Array(questions.length).fill(0));\r\n    }\r\n  }, [questions]);\r\n\r\n  // useEffect(() => {\r\n  //   if (currentStep === 2 && questions.length > 0) {\r\n  //     const currentElement = questions[currentElementIndex];\r\n  //     const aiText = currentElement.type === 1 ? currentElement.answer : currentElement.comment;\r\n  \r\n  //     // Validate aiText\r\n  //     if (typeof aiText !== 'string' || aiText.length === 0) {\r\n  //       console.error('aiText is not a valid string:', aiText);\r\n  //       setTypedText(''); // Reset to empty if invalid\r\n  //       setIsAITyping(false);\r\n  //       return;\r\n  //     }\r\n  \r\n  //     console.log('aiText:', aiText); // Debug the input\r\n  \r\n  //     setTypedText(''); // Reset typed text\r\n  //     setIsAITyping(true);\r\n  \r\n  //     let index = 0;\r\n  //     const typingInterval = setInterval(() => {\r\n  //       if (index < aiText.length) {\r\n  //         // Set the full substring up to the current index\r\n  //         setTypedText(aiText.slice(0, index + 1));\r\n  //         index++;\r\n  //       } else {\r\n  //         clearInterval(typingInterval);\r\n  //         setIsAITyping(false);\r\n  //       }\r\n  //     }, 50);\r\n  \r\n  //     // Cleanup to prevent overlapping intervals\r\n  //     return () => clearInterval(typingInterval);\r\n  //   }\r\n  // }, [currentStep, questions, currentElementIndex]);\r\n\r\n  // Define the current question based on step and element type\r\n  const getQuestion = (step, element) => {\r\n    const { type } = element;\r\n    if (step === 0) {\r\n      return {\r\n        text: type === 1 ? \"Do you think this claim is True or False?\" : \"Do you support or against this claim?\",\r\n        options: type === 1 ? [\"True\", \"False\"] : [\"Support\", \"Against\"]\r\n      };\r\n    } else if (step === 1) {\r\n      return {\r\n        text: \"How certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\r\n        options: [\"1: Not at all certain\", \"2: Slightly certain\", \"3: Moderately certain\", \"4: Very certain\", \"5: Absolutely certain\"]\r\n      };\r\n    } else if (step === 2) {\r\n      return {\r\n        text: type === 1 \r\n          ? \"After checking the AI response, do you think this claim is True or False?\" \r\n          : \"After checking the AI comment, do you support or against this claim?\",\r\n        options: type === 1 ? [\"True\", \"False\"] : [\"Support\", \"Against\"]\r\n      };\r\n    } else if (step === 3) {\r\n      return {\r\n        text: type === 1 \r\n          ? \"After checking the AI response, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\" \r\n          : \"After checking the AI comment, how certain are you about your choice? (1 = Not at all certain, 5 = Absolutely certain)\",\r\n        options: [\"1: Not at all certain\", \"2: Slightly certain\", \"3: Moderately certain\", \"4: Very certain\", \"5: Absolutely certain\"]\r\n      };\r\n    }\r\n  };\r\n\r\n  // Early returns for error and loading states\r\n  if (error) return <div>{error}</div>;\r\n  if (questions.length === 0) return <div>Loading...</div>;\r\n\r\n  const currentElement = questions[currentElementIndex];\r\n  const currentQuestion = getQuestion(currentStep, currentElement);\r\n\r\n  // Handle user answers and survey progression\r\n  const handleAnswer = (selectedOption) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[currentElementIndex][currentStep] = selectedOption;\r\n    setAnswers(newAnswers);\r\n  \r\n    // Get the current question\r\n    const currentElement = questions[currentElementIndex];\r\n  \r\n    // For type 2 questions in step 0, decide which comment to show\r\n    if (currentStep === 0 && currentElement.type === 2) {\r\n      if (selectedOption === \"Support\") {\r\n        const commentIndex = supportCounter % 2 === 0 ? 1 : 2; // Alternate: 1, 2, 1, 2...\r\n        setCommentToShow((prev) => {\r\n          const newCommentToShow = [...prev];\r\n          newCommentToShow[currentElementIndex] = commentIndex;\r\n          return newCommentToShow;\r\n        });\r\n        setSupportCounter((prev) => prev + 1);\r\n      } else if (selectedOption === \"Against\") {\r\n        const commentIndex = againstCounter % 2 === 0 ? 1 : 2; // Alternate: 1, 2, 1, 2...\r\n        setCommentToShow((prev) => {\r\n          const newCommentToShow = [...prev];\r\n          newCommentToShow[currentElementIndex] = commentIndex;\r\n          return newCommentToShow;\r\n        });\r\n        setAgainstCounter((prev) => prev + 1);\r\n      }\r\n    }\r\n  \r\n    if (currentStep < 3) {\r\n      setCurrentStep(currentStep + 1);\r\n    } else if (currentElementIndex < questions.length - 1) {\r\n      setCurrentElementIndex(currentElementIndex + 1);\r\n      setCurrentStep(0);\r\n    } else {\r\n      fetch(`${process.env.REACT_APP_BACKEND_URL}/responses`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ participantNumber, age, education, answers: newAnswers }),\r\n      })\r\n        .then(response => response.text())\r\n        .then(data => {\r\n          console.log('Success:', data);\r\n          alert('Survey submitted successfully!');\r\n        })\r\n        .catch(error => {\r\n          console.error('Error:', error);\r\n          alert('Failed to submit survey.');\r\n        });\r\n    }\r\n  };\r\n\r\n  // Handle AI suggestion request\r\n  const handleAIRequest = () => {\r\n    setIsAIRequested(true); // Trigger the typing effect\r\n  };\r\n\r\n  return (\r\n    <div className=\"survey-container\">\r\n      {/* Always show the claim */}\r\n      <div className=\"claim-section\">\r\n        <h2>Claim {currentElement.claim_number}: {currentElement.claim}</h2>\r\n      </div>\r\n  \r\n      {/* Step 2: Show relevant question for type 1 */}\r\n      {currentStep === 2 && currentElement.type === 1 && (\r\n        <div className=\"question-section\">\r\n          <p><strong>Relevant Question:</strong> {currentElement.question}</p>\r\n        </div>\r\n      )}\r\n  \r\n      {/* Step 2: Show \"Ask AI for suggestion\" button if AI not yet requested */}\r\n      {currentStep === 2 && !isAIRequested && (\r\n        <button onClick={handleAIRequest}>Ask AI for suggestion</button>\r\n      )}\r\n  \r\n      {/* Step 2: Show AI response/comment with typing effect after request */}\r\n      {currentStep === 2 && isAIRequested && (\r\n        <div className=\"ai-section\">\r\n        <p>\r\n          <strong>\r\n            {currentElement.type === 1 ? \"AI Response:\" : `AI Comment:`}\r\n          </strong>\r\n        </p>\r\n          <p>{typedText}</p>\r\n        </div>\r\n      )}\r\n      {/* Show survey question and options for all steps except step 2 until AI typing is done */}\r\n      {(currentStep !== 2 || (currentStep === 2 && isAIRequested && !isAITyping)) && (\r\n        <>\r\n          <div className=\"question-section\">\r\n            <p>{currentQuestion.text}</p>\r\n          </div>\r\n          <div className=\"options-section\">\r\n            {currentQuestion.options.map((option) => (\r\n              <button key={option} onClick={() => handleAnswer(option)}>\r\n                {option}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Survey;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}